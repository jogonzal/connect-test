import { initializeIcons } from "@fluentui/react";
import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { QueryClient, QueryClientProvider } from "react-query";
import { App } from "../components/App";

export interface IStripeConnectAppearance {
  colors: {
    primary?: string;
    textLink?: string;
  };
}

export interface IStripeConnectUIConfig {
  overlay?: string;
}

export interface IStripeConnectInit {
  publishableKey: string;
  clientSecret: string;
  // appearance: IStripeConnectAppearance;
  // uiConfig?: IStripeConnectUIConfig;
}

interface IStripeConnect {
  onLoad?: () => void;
  init?: (params: IStripeConnectInit) => void;
}

declare global {
  interface Window {
    StripeConnect?: IStripeConnect;
    StripeRcCommitHash?: string;
  }
}

export type CustomElement<T> = Partial<
  T & React.DOMAttributes<T> & { children?: React.ReactNode | undefined }
>;

declare global {
  // eslint-disable-next-line @typescript-eslint/no-namespace
  namespace JSX {
    interface IntrinsicElements {
      ["stripe-payments-experience"]: CustomElement<{}>;
      ["stripe-payouts-experience"]: CustomElement<{}>;
      ["stripe-account-onboarding-experience"]: CustomElement<{}>;
      ["stripe-account-management-experience"]: CustomElement<{}>;
      ["stripe-instant-payouts-experience"]: CustomElement<{}>;
      ["stripe-payment-details-experience"]: CustomElement<{
        hidden: string | null;
        "charge-id": string | null;
      }>;
    }
  }
}

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      refetchOnWindowFocus: false,
    },
  },
});

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Jorge test platform</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script
          async
          src="https://b.stripecdn.com/connect-js/v0.1/connect.js"
        ></script>
      </Head>

      <QueryClientProvider client={queryClient}>
        <App />
      </QueryClientProvider>
    </div>
  );
};

// Only run in client
if (typeof window !== "undefined") {
  initializeIcons();
}

export default Home;
